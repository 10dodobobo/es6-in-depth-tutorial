// TODO add to google doc.

console.log(it.next().value);
console.log(it.next().value);
console.log(it.next().value);
console.log(it.next().value); With some console.logs to it now
we find that the iterator yields each argument within arguments
individually.

Note that we've essentially used the yield keyword 3 times in this loop
and es6 provides a shortcut for us whenever we use yield more than one time in a row.
We can just use the yield asterisk syntax and reform the for loop to one line with:
  yield* arguments; And you'll notice in our console that everything works the same!

Great! now to transform the arguments in arrayIterator to a true array and fully mimic
the iterator we created originally we could just pass a spread array rather than arguing each
element one a a time, and boom we have a fully mimicked iterator with es6 generators.

Awesome! This covered a more advanced topic within JavaSCript and es6 in general.
And if you plan on coding in languages in more than just JS and ES6, then iterators will show up everywhere.
Most of all though, generators will allow you to approach more advanced programs in ES6,
expecially with the convenient yield keyword and next method!
